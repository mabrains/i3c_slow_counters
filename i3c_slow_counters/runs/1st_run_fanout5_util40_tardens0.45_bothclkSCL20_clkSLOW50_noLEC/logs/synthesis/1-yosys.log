
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/i3c_slow_counters/src/sync_autonomous.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i3c_slow_counters/src/sync_autonomous.v' to AST representation.
Generating RTLIL representation for module `\SYNC_AClr_S2C'.
Generating RTLIL representation for module `\SYNC_ASelfClr_LVL_S2C_Seq2'.
Generating RTLIL representation for module `\SYNC_ASelfClr_S2C_Seq2'.
Generating RTLIL representation for module `\SYNC_ASelfClr_C2S_Seq2'.
Generating RTLIL representation for module `\SYNC_S2B'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v' to AST representation.
Generating RTLIL representation for module `\i3c_slow_counters'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openLANE_flow/designs/i3c_slow_counters/src/sync_support.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i3c_slow_counters/src/sync_support.v' to AST representation.
Generating RTLIL representation for module `\SYNC_2PH_S2C_STATE'.
Generating RTLIL representation for module `\SYNC_2PH_LVL_S2C_STATE'.
Generating RTLIL representation for module `\SYNC_2PH_LVLH_S2C_STATE'.
Generating RTLIL representation for module `\SYNC_Pulse_S2C'.
Generating RTLIL representation for module `\SYNC_ASet_Seq2'.
Generating RTLIL representation for module `\SYNC_AClr_Seq2'.
Generating RTLIL representation for module `\SYNC_S2C'.
Generating RTLIL representation for module `\SYNC_C2S'.
Generating RTLIL representation for module `\SYNC_AClr_C2S'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openLANE_flow/designs/i3c_slow_counters/src/i3c_params.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i3c_slow_counters/src/i3c_params.v' to AST representation.
Successfully finished Verilog frontend.

5. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/i3c_slow_counters/runs/1st_run_fanout5_util40_tardens0.45_bothclkSCL20_clkSLOW50_noLEC/tmp/synthesis/hierarchy.dot'.
Dumping module i3c_slow_counters to page 1.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \i3c_slow_counters
Used module:     \SYNC_S2C
Parameter \WIDTH = 1

6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\SYNC_S2C'.
Parameter \WIDTH = 1
Generating RTLIL representation for module `$paramod\SYNC_S2C\WIDTH=1'.
Parameter \WIDTH = 1
Found cached RTLIL representation for module `$paramod\SYNC_S2C\WIDTH=1'.
Parameter \WIDTH = 1
Found cached RTLIL representation for module `$paramod\SYNC_S2C\WIDTH=1'.

6.3. Analyzing design hierarchy..
Top module:  \i3c_slow_counters
Used module:     $paramod\SYNC_S2C\WIDTH=1

6.4. Analyzing design hierarchy..
Top module:  \i3c_slow_counters
Used module:     $paramod\SYNC_S2C\WIDTH=1
Removing unused module `\SYNC_AClr_C2S'.
Removing unused module `\SYNC_C2S'.
Removing unused module `\SYNC_S2C'.
Removing unused module `\SYNC_AClr_Seq2'.
Removing unused module `\SYNC_ASet_Seq2'.
Removing unused module `\SYNC_Pulse_S2C'.
Removing unused module `\SYNC_2PH_LVLH_S2C_STATE'.
Removing unused module `\SYNC_2PH_LVL_S2C_STATE'.
Removing unused module `\SYNC_2PH_S2C_STATE'.
Removing unused module `\SYNC_S2B'.
Removing unused module `\SYNC_ASelfClr_C2S_Seq2'.
Removing unused module `\SYNC_ASelfClr_S2C_Seq2'.
Removing unused module `\SYNC_ASelfClr_LVL_S2C_Seq2'.
Removing unused module `\SYNC_AClr_S2C'.
Removed 14 unused modules.

7. Executing TRIBUF pass.

8. Executing SYNTH pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.1.1. Analyzing design hierarchy..
Top module:  \i3c_slow_counters
Used module:     $paramod\SYNC_S2C\WIDTH=1

8.1.2. Analyzing design hierarchy..
Top module:  \i3c_slow_counters
Used module:     $paramod\SYNC_S2C\WIDTH=1
Removed 0 unused modules.

8.2. Executing PROC pass (convert processes to netlists).

8.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:278$104 in module i3c_slow_counters.
Marked 5 switch rules as full_case in process $proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:253$87 in module i3c_slow_counters.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:232$82 in module i3c_slow_counters.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:227$78 in module i3c_slow_counters.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68 in module i3c_slow_counters.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:182$56 in module i3c_slow_counters.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/i3c_slow_counters/src/sync_support.v:322$179 in module $paramod\SYNC_S2C\WIDTH=1.
Removed a total of 0 dead cases.

8.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

8.2.4. Executing PROC_INIT pass (extract init attributes).

8.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \RSTn in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:278$104'.
Found async reset \RSTn in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:253$87'.
Found async reset \RSTn in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:232$82'.
Found async reset \RSTn in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:227$78'.
Found async reset \RSTn in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68'.
Found async reset \RSTn in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:182$56'.
Found async reset \rst_n in `$paramod\SYNC_S2C\WIDTH=1.$proc$/openLANE_flow/designs/i3c_slow_counters/src/sync_support.v:322$179'.

8.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:278$104'.
     1/2: $0\hj_done[0:0]
     2/2: $0\hj_cnt[1:0]
Creating decoders for process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:253$87'.
     1/1: $0\mid_cnt[6:0]
Creating decoders for process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:232$82'.
     1/1: $0\scl_check_idle_n[0:0]
Creating decoders for process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:227$78'.
     1/1: $0\scl_check_idle[0:0]
Creating decoders for process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68'.
     1/3: $0\check_idle[0:0]
     2/3: $0\check_idle_n[0:0]
     3/3: $0\request_start[0:0]
Creating decoders for process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:182$56'.
     1/1: $0\microsec_cnt[5:0]
Creating decoders for process `$paramod\SYNC_S2C\WIDTH=1.$proc$/openLANE_flow/designs/i3c_slow_counters/src/sync_support.v:322$179'.
     1/1: $0\clk_copy[0:0]

8.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

8.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i3c_slow_counters.\hj_cnt' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:278$104'.
  created $adff cell `$procdff$265' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\hj_done' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:278$104'.
  created $adff cell `$procdff$266' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\mid_cnt' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:253$87'.
  created $adff cell `$procdff$267' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\scl_check_idle_n' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:232$82'.
  created $adff cell `$procdff$268' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\scl_check_idle' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:227$78'.
  created $adff cell `$procdff$269' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\request_start' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68'.
  created $adff cell `$procdff$270' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\check_idle_n' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68'.
  created $adff cell `$procdff$271' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\check_idle' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68'.
  created $adff cell `$procdff$272' with positive edge clock and negative level reset.
Creating register for signal `\i3c_slow_counters.\microsec_cnt' using process `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:182$56'.
  created $adff cell `$procdff$273' with positive edge clock and negative level reset.
Creating register for signal `$paramod\SYNC_S2C\WIDTH=1.\clk_copy' using process `$paramod\SYNC_S2C\WIDTH=1.$proc$/openLANE_flow/designs/i3c_slow_counters/src/sync_support.v:322$179'.
  created $adff cell `$procdff$274' with positive edge clock and negative level reset.

8.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 7 empty switches in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:278$104'.
Removing empty process `i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:278$104'.
Found and cleaned up 8 empty switches in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:253$87'.
Removing empty process `i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:253$87'.
Found and cleaned up 1 empty switch in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:232$82'.
Removing empty process `i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:232$82'.
Found and cleaned up 1 empty switch in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:227$78'.
Removing empty process `i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:227$78'.
Found and cleaned up 3 empty switches in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68'.
Removing empty process `i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:194$68'.
Found and cleaned up 4 empty switches in `\i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:182$56'.
Removing empty process `i3c_slow_counters.$proc$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:182$56'.
Removing empty process `$paramod\SYNC_S2C\WIDTH=1.$proc$/openLANE_flow/designs/i3c_slow_counters/src/sync_support.v:322$179'.
Cleaned up 24 empty switches.

8.3. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\SYNC_S2C\WIDTH=1.
<suppressed ~3 debug messages>

8.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.
<suppressed ~21 debug messages>

8.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 36 unused cells and 105 unused wires.
<suppressed ~39 debug messages>

8.6. Executing CHECK pass (checking for obvious problems).
checking module i3c_slow_counters..
found and reported 0 problems.

8.7. Executing OPT pass (performing simple optimizations).

8.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

8.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$248: \request_start -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

8.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
    New ctrl vector for $mux cell $procmux$248: { }
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 1 changes.

8.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.7.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

8.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.7.9. Rerunning OPT passes. (Maybe there is more to do..)

8.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

8.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

8.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.7.13. Executing OPT_DFF pass (perform DFF optimizations).

8.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.7.16. Finished OPT passes. (There is nothing left to do.)

8.8. Executing FSM pass (extract and optimize FSM).

8.8.1. Executing FSM_DETECT pass (finding FSMs in design).

8.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.9. Executing OPT pass (performing simple optimizations).

8.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

8.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

8.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$273 ($adff) from module i3c_slow_counters (D = $0\microsec_cnt[5:0], Q = \microsec_cnt).
Adding EN signal on $procdff$272 ($adff) from module i3c_slow_counters (D = $0\check_idle[0:0], Q = \check_idle).
Adding EN signal on $procdff$271 ($adff) from module i3c_slow_counters (D = $0\check_idle_n[0:0], Q = \check_idle_n).
Adding EN signal on $procdff$269 ($adff) from module i3c_slow_counters (D = $not$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:231$81_Y, Q = \scl_check_idle).
Adding EN signal on $procdff$268 ($adff) from module i3c_slow_counters (D = $not$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:236$85_Y, Q = \scl_check_idle_n).
Adding EN signal on $procdff$267 ($adff) from module i3c_slow_counters (D = $0\mid_cnt[6:0], Q = \mid_cnt).

8.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

8.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.
<suppressed ~1 debug messages>

8.9.9. Rerunning OPT passes. (Maybe there is more to do..)

8.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

8.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

8.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

8.9.13. Executing OPT_DFF pass (perform DFF optimizations).

8.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

8.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.9.16. Rerunning OPT passes. (Maybe there is more to do..)

8.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

8.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

8.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.9.20. Executing OPT_DFF pass (perform DFF optimizations).

8.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.9.23. Finished OPT passes. (There is nothing left to do.)

8.10. Executing WREDUCE pass (reducing word size of cells).
Removed cell i3c_slow_counters.$procmux$214 ($mux).
Removed cell i3c_slow_counters.$procmux$227 ($mux).
Removed cell i3c_slow_counters.$procmux$221 ($mux).
Removed cell i3c_slow_counters.$procmux$217 ($mux).
Removed top 5 bits (of 6) from port B of cell i3c_slow_counters.$add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:189$63 ($add).
Removed top 1 bits (of 2) from port B of cell i3c_slow_counters.$auto$opt_dff.cc:218:make_patterns_logic$283 ($ne).
Removed top 1 bits (of 7) from port B of cell i3c_slow_counters.$ne$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:265$96 ($ne).
Removed top 6 bits (of 7) from port B of cell i3c_slow_counters.$add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:266$97 ($add).
Removed top 1 bits (of 7) from port B of cell i3c_slow_counters.$eq$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:275$102 ($eq).
Removed cell i3c_slow_counters.$procmux$243 ($mux).
Removed cell i3c_slow_counters.$procmux$255 ($mux).
Removed cell i3c_slow_counters.$procmux$237 ($mux).
Removed top 2 bits (of 4) from port B of cell i3c_slow_counters.$auto$opt_dff.cc:218:make_patterns_logic$276 ($ne).
Removed cell i3c_slow_counters.$procmux$260 ($mux).
Removed top 2 bits (of 5) from port B of cell i3c_slow_counters.$auto$opt_dff.cc:218:make_patterns_logic$295 ($ne).
Removed top 2 bits (of 5) from port B of cell i3c_slow_counters.$auto$opt_dff.cc:218:make_patterns_logic$293 ($ne).
Removed top 1 bits (of 3) from port B of cell i3c_slow_counters.$auto$opt_dff.cc:218:make_patterns_logic$297 ($ne).

8.11. Executing PEEPOPT pass (run peephole optimizers).

8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

8.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module i3c_slow_counters:
  creating $macc model for $add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:189$63 ($add).
  creating $macc model for $add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:266$97 ($add).
  creating $alu model for $macc $add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:266$97.
  creating $alu model for $macc $add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:189$63.
  creating $alu cell for $add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:189$63: $auto$alumacc.cc:485:replace_alu$301
  creating $alu cell for $add$/openLANE_flow/designs/i3c_slow_counters/src/i3c_slow_counters.v:266$97: $auto$alumacc.cc:485:replace_alu$304
  created 2 $alu and 0 $macc cells.

8.14. Executing SHARE pass (SAT-based resource sharing).

8.15. Executing OPT pass (performing simple optimizations).

8.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.
<suppressed ~1 debug messages>

8.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

8.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

8.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.15.6. Executing OPT_DFF pass (perform DFF optimizations).

8.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

8.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.15.9. Rerunning OPT passes. (Maybe there is more to do..)

8.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

8.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

8.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.15.13. Executing OPT_DFF pass (perform DFF optimizations).

8.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.15.16. Finished OPT passes. (There is nothing left to do.)

8.16. Executing MEMORY pass.

8.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

8.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

8.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.18. Executing OPT pass (performing simple optimizations).

8.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.
<suppressed ~2 debug messages>

8.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.18.3. Executing OPT_DFF pass (perform DFF optimizations).

8.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.18.5. Finished fast OPT passes.

8.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

8.20. Executing OPT pass (performing simple optimizations).

8.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

8.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

8.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.20.6. Executing OPT_SHARE pass.

8.20.7. Executing OPT_DFF pass (perform DFF optimizations).

8.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

8.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

8.20.10. Finished OPT passes. (There is nothing left to do.)

8.21. Executing TECHMAP pass (map to technology primitives).

8.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.21.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
No more expansions possible.
<suppressed ~428 debug messages>

8.22. Executing OPT pass (performing simple optimizations).

8.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.
<suppressed ~130 debug messages>

8.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
<suppressed ~132 debug messages>
Removed a total of 44 cells.

8.22.3. Executing OPT_DFF pass (perform DFF optimizations).

8.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 4 unused cells and 132 unused wires.
<suppressed ~5 debug messages>

8.22.5. Finished fast OPT passes.

8.23. Executing ABC pass (technology mapping using ABC).

8.23.1. Extracting gate netlist of module `\i3c_slow_counters' to `<abc-temp-dir>/input.blif'..
Extracted 156 gates and 186 wires to a netlist network with 29 inputs and 28 outputs.

8.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       41
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:       15
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        6
ABC RESULTS:                OR cells:       23
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               XOR cells:        8
ABC RESULTS:        internal signals:      129
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       28
Removing temp directory.

8.24. Executing OPT pass (performing simple optimizations).

8.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.
<suppressed ~1 debug messages>

8.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

8.24.3. Executing OPT_DFF pass (perform DFF optimizations).

8.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 0 unused cells and 143 unused wires.
<suppressed ~5 debug messages>

8.24.5. Finished fast OPT passes.

8.25. Executing HIERARCHY pass (managing design hierarchy).

8.25.1. Analyzing design hierarchy..
Top module:  \i3c_slow_counters

8.25.2. Analyzing design hierarchy..
Top module:  \i3c_slow_counters
Removed 0 unused modules.

8.26. Printing statistics.

=== i3c_slow_counters ===

   Number of wires:                150
   Number of wire bits:            181
   Number of public wires:          45
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                142
     $_ANDNOT_                      41
     $_AND_                          2
     $_DFFE_PN0P_                   17
     $_DFF_PN0_                      4
     $_MUX_                          1
     $_NAND_                        15
     $_NOR_                          6
     $_NOT_                          6
     $_ORNOT_                        9
     $_OR_                          23
     $_XNOR_                        10
     $_XOR_                          8

8.27. Executing CHECK pass (checking for obvious problems).
checking module i3c_slow_counters..
found and reported 0 problems.

9. Executing SHARE pass (SAT-based resource sharing).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i3c_slow_counters..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i3c_slow_counters.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i3c_slow_counters'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i3c_slow_counters.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 0 unused cells and 17 unused wires.
<suppressed ~17 debug messages>

12. Printing statistics.

=== i3c_slow_counters ===

   Number of wires:                133
   Number of wire bits:            164
   Number of public wires:          28
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                142
     $_ANDNOT_                      41
     $_AND_                          2
     $_DFFE_PN0P_                   17
     $_DFF_PN0_                      4
     $_MUX_                          1
     $_NAND_                        15
     $_NOR_                          6
     $_NOT_                          6
     $_ORNOT_                        9
     $_OR_                          23
     $_XNOR_                        10
     $_XOR_                          8

mapping tbuf

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module i3c_slow_counters..
  Treeifying 1 MUXes:
    Found tree with 1 MUXes at root $abc$938$new_n102_.
    Finished treeification: Found 1 trees.
  Covering trees:
    Replaced tree at $abc$938$new_n102_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~18 debug messages>

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
Using template \$_MUX_ for cells of type $_MUX_.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing TECHMAP pass (map to technology primitives).

20.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

21. Executing SIMPLEMAP pass (map simple cells to gate primitives).

22. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

22.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\i3c_slow_counters':
  mapped 21 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

23. Printing statistics.

=== i3c_slow_counters ===

   Number of wires:                154
   Number of wire bits:            185
   Number of public wires:          28
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      41
     $_AND_                          2
     $_MUX_                         17
     $_NAND_                        15
     $_NOR_                          6
     $_NOT_                          6
     $_ORNOT_                        9
     $_OR_                          23
     $_XNOR_                        10
     $_XOR_                          8
     sky130_fd_sc_hd__dfrtp_2       21
     sky130_fd_sc_hd__mux2_1         1

[INFO]: ABC: WireLoad : S_4

24. Executing ABC pass (technology mapping using ABC).

24.1. Extracting gate netlist of module `\i3c_slow_counters' to `/tmp/yosys-abc-NZjfDY/input.blif'..
Extracted 137 gates and 167 wires to a netlist network with 30 inputs and 26 outputs.

24.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-NZjfDY/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-NZjfDY/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-NZjfDY/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/i3c_slow_counters/runs/1st_run_fanout5_util40_tardens0.45_bothclkSCL20_clkSLOW50_noLEC/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/i3c_slow_counters/runs/1st_run_fanout5_util40_tardens0.45_bothclkSCL20_clkSLOW50_noLEC/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    7.77 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/i3c_slow_counters/runs/1st_run_fanout5_util40_tardens0.45_bothclkSCL20_clkSLOW50_noLEC/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/i3c_slow_counters/runs/1st_run_fanout5_util40_tardens0.45_bothclkSCL20_clkSLOW50_noLEC/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + buffer -N 5 -S 1000.0 
ABC: Node 109 has dup fanin 63.
ABC: Node 109 has dup fanin 63.
ABC: Node 130 has dup fanin 74.
ABC: Node 130 has dup fanin 74.
ABC: Node 141 has dup fanin 15.
ABC: Node 141 has dup fanin 70.
ABC: Node 141 has dup fanin 15.
ABC: Node 141 has dup fanin 70.
ABC: Node 142 has dup fanin 16.
ABC: Node 142 has dup fanin 69.
ABC: Node 142 has dup fanin 16.
ABC: Node 142 has dup fanin 69.
ABC: + upsize -D 10000 
ABC: Current delay (2424.84 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     91 ( 36.3 %)   Cap =  8.8 ff (  5.1 %)   Area =      656.88 ( 63.7 %)   Delay =  2200.23 ps  ( 27.5 %)               
ABC: Path  0 --      13 : 0    5 pi                      A =   0.00  Df =  15.3  -10.0 ps  S =  29.3 ps  Cin =  0.0 ff  Cout =  12.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      74 : 1    2 sky130_fd_sc_hd__inv_2  A =   3.75  Df =  38.9   -3.6 ps  S =  25.8 ps  Cin =  4.5 ff  Cout =   4.0 ff  Cmax = 331.4 ff  G =   85  
ABC: Path  2 --      77 : 4    3 sky130_fd_sc_hd__or4b_2 A =  10.01  Df = 747.0 -527.7 ps  S = 136.0 ps  Cin =  1.5 ff  Cout =  11.9 ff  Cmax = 265.5 ff  G =  767  
ABC: Path  3 --      78 : 1    3 sky130_fd_sc_hd__inv_2  A =   3.75  Df = 842.1 -577.1 ps  S =  61.1 ps  Cin =  4.5 ff  Cout =   8.5 ff  Cmax = 331.4 ff  G =  184  
ABC: Path  4 --      79 : 3    4 sky130_fd_sc_hd__and3_2 A =   7.51  Df =1052.8 -565.4 ps  S =  82.1 ps  Cin =  1.5 ff  Cout =  11.2 ff  Cmax = 309.5 ff  G =  719  
ABC: Path  5 --     111 : 2    3 sky130_fd_sc_hd__nor2_2 A =   6.26  Df =1128.1 -426.5 ps  S = 252.5 ps  Cin =  4.4 ff  Cout =  21.5 ff  Cmax = 141.9 ff  G =  483  
ABC: Path  6 --     115 : 2    5 sky130_fd_sc_hd__or2_2  A =   6.26  Df =1442.6 -541.8 ps  S =  84.0 ps  Cin =  1.5 ff  Cout =  13.8 ff  Cmax = 299.4 ff  G =  898  
ABC: Path  7 --     121 : 5    1 sky130_fd_sc_hd__a32o_2 A =  11.26  Df =2200.2 -308.5 ps  S = 123.3 ps  Cin =  2.3 ff  Cout =  17.6 ff  Cmax = 264.6 ff  G =  755  
ABC: Start-point = pi12 (\microsec_cnt [1]).  End-point = po10 ($auto$rtlil.cc:2290:MuxGate$1073).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   30/   26  lat =    0  nd =    91  edge =    234  area =656.83  delay =10.00  lev = 10
ABC: + write_blif /tmp/yosys-abc-NZjfDY/output.blif 

24.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:        internal signals:      111
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       26
Removing temp directory.

25. Executing SETUNDEF pass (replace undef values with defined constants).

26. Executing HILOMAP pass (mapping to constant drivers).

27. Executing SPLITNETS pass (splitting up multi-bit signals).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i3c_slow_counters..
Removed 0 unused cells and 172 unused wires.
<suppressed ~1 debug messages>

29. Executing INSBUF pass (insert buffer cells for connected wires).

30. Executing CHECK pass (checking for obvious problems).
checking module i3c_slow_counters..
Warning: Wire i3c_slow_counters.\slow_gate is used but has no driver.
Warning: Wire i3c_slow_counters.\hold_engine is used but has no driver.
Warning: Wire i3c_slow_counters.\force_sda is used but has no driver.
Warning: Wire i3c_slow_counters.\done_60 is used but has no driver.
Warning: Wire i3c_slow_counters.\done_100 is used but has no driver.
found and reported 5 problems.

31. Printing statistics.

=== i3c_slow_counters ===

   Number of wires:                126
   Number of wire bits:            135
   Number of public wires:          39
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                114
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a22o_2         3
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__a32o_2         2
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2         2
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1          4
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__dfrtp_2       21
     sky130_fd_sc_hd__inv_2         29
     sky130_fd_sc_hd__mux2_1         1
     sky130_fd_sc_hd__nor2_2         3
     sky130_fd_sc_hd__nor3_2         2
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2         3
     sky130_fd_sc_hd__o221a_2        2
     sky130_fd_sc_hd__o22a_2         5
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o32a_2         3
     sky130_fd_sc_hd__or2_2          7
     sky130_fd_sc_hd__or3_2          4
     sky130_fd_sc_hd__or4_2          3
     sky130_fd_sc_hd__or4b_2         1

   Chip area for module '\i3c_slow_counters': 1223.673600

32. Executing Verilog backend.
Dumping module `\i3c_slow_counters'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 17e7743fc7, CPU: user 0.74s system 0.04s, MEM: 44.54 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 36% 2x abc (0 sec), 24% 4x stat (0 sec), ...
